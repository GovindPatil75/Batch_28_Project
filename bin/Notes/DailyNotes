Class :

Class is collection of Object /Variables and methods 
its does not take spaces on memory 
Class is blueprint/logical entity 

Pre defined :
EX.
System
String 
Scanner

User defined : created By Java devloper 

EX .HelloWorldTest 

===========================================

Data types : 
Data types specify diffrent sizes and values that can be stored in the variables 


1.Primitive 
size fixed 

Byte (1 Byte),short (2),int(4),long(8) ,float(4),double(8),boolean(1 Bit),char(2)

2.Non Primitive 
size is not fixed 

Ex. String ,Arrays ,Class,Interface 


syntax :

DataTypes variblename=value;

=====================================
Varibles :

Varibles is name of memory location 
stored any type of values 

int a=10;

Local Varibles :
----------------
declare inside the method /method parameters define 

ex. 

public void Display(string a){

   //local varible
   int a=5;
}

Static Varibles /class Varibles :
----------------
declare with keyword static 

static int a=10;

Instance Varibles/ non static varibles  :
------------------------
declare inside the class but outside the methods 

ex .

public class Test {

   int b=10;
   
   p.v.m(){
   
   
   }

}

======================================
Operators :

Arthmatic : +,-,*,%,/

int a=5;
int b=7;

int c=a+b; //5+7=12
  c=a-b // 5-7=-2
  c=a*b //5*7=35
  c=b%a =7%5 =2 

Logical :  && , || ,!

a>b && b<c

T && T =T
T && F=F
F && T=F
F && F=F

T || T =T
T || F =T
F || T =T
F || F= F

!(T)=F
!(F)=T

Assigment : 
Comparison :
Bitwise :

====================================
Comparison : >,<,>=,<=,==

int a=5;
int b=7;

a>b  // 5>7 ---boolean value true/false

==================================================

Object : 

class HumanBeing -- Object --- Sumit 

class Animal -- Object -- Tiger 

Object is Instance of class /sub set of class 
execute class 
create --- object memory allocate 

synatx :

ClassName Objectname=new ClassName();

// non static -instance varible 


Method : 
===============

group of code / block of code --- user input -- process --- output 

execute when -its called 

static /non -static method 

pre defined : main() ,println(),sort()
user defined : java devloper created 

syntax :
non static 

Access_modifier returntype methodname(){

// code 
}

static 
Access_modifier static returntype methodname(){

// code 
}

public void Demo(){

//code 
}

Advantages method :
Reusablebilty of the code 
line of code decrease 
Readiability / process fast 
========================================
Access Modifier :

Restrict the scope of Class,Constructor ,Varibles ,Method 
its provides security and accessibility 

Public   :  class ,Same packages ,diffrent packages subclass ,world 
Protected : class ,Same pkg ,diffrent pkg with subclass ,world-N
Private : class 
deafult (No modifier) : class ,Same Pkg 

================
Control Statements 

we control the program execution 

Conditional Statments/Selectional Statments 
-----------------------

1.if(condition){

}

2.if(condition){

}else{

}
3.if-else -if
----------------
if(condition){

}
else if(condition){


}else{

}
4.nested if 
------------------
if(Condition){

  if(condition){
  
  }

}

Switch case :


Looping Statments :
---------------------
Statments iterate itself 
---------------------
for,while,do-while 

syntax :

for(initilization;condition;incre/decre){

  //code -statments 
}

while

syntax :

initlization 

while(condition){

 //statment ;
 //inc/dec
}
print no 1-10 -console 


do--while

initlization
do{

//statments
//inc/dec

}while(condition)


Jump Statments :
===============
break :   looping statment,switch case
continue : looping statment
return : Method 

*
**
***
****







------------------------
break,continue,return
==========================================
String : 
--------------
- non-primitive data type -- sized not fixed 
- sequence of character / Array of Character 
- String is class 

note : Object class is the parent class in Java 
syntax :
public final class String extends Object implements 3 interface{

 // methods 
 // code

}

String s1=new String("Test"); // new keyword --2 object
String s2="Demo" ;    // String literalls -- 1

Heap memory --- SCP (String contant pool area)

String s1=new String("Demo");
String s2=new String("Demo"); 

s1==s2 - false
s1.equals(s2)-- true
Heap memory -- Demo--S1
               Demo--s2
               
SCP --

 String str1="Hello";
 String str2="hello";
 
 str1.equals(str2); //false
======================================

length(); --- string length --int 

===============================
String object is immutable 


String s1="Pune"; // SCP --- Pune <--- s1
String s2="Pune"; 

String s2="Delhi" // Delhi <---s2

====================================
Revrese string program :
----------------------
String name ="Hello world";
String rev="";

========================================
OOPs Concepts 

4 pillars
------------------------
1.Inheritance
2.Polymorphism
3.Abstarction
4.Encapsulation 

Inheritance
-----------------------
Mechanism child class inherit the property (Fields ,methods )
 of parent class 
 
 Parent class : whose property inherited 
 Child class : who inherit the property of parent class 

why do we need Inheritance : 

1. code reusability 
2.method overriding 
3.Abstarction 

extends : C -extends-- C

Types of Inheritance :

1.single level Inheritance :

A --> B
single parent class inherit single child class 

2.Multilevel Inheritance :

A--->B---->C

Parent_A  --> a,m1()
Child_B extends Parent_A ---> name ,p1() ,a,m1()
Child_C extends Child_B  ->name ,p1() ,a,m1()

3.Hierachical Inheritance:

multiple child classes inherit single parent class 

X-->Y,Z
4.Multiple Inheritance :

multiple parents inherited by single child 

A (m1()),B (m1()) ---> C
5.Hybrid Inheritance

A-->B,C --->D

==========================================
Polymorphism :one of Many form
--- one object with diffrent behaviour --
person ---> Teacher ,Customer ,Actor
water --> solid,liquid,gas 

public void person(teacher ){

//code
}
public void person(Actor ){

//code
}

Types :
1.Compile time polymorphism
----------------------
static polymorphism --- handle by Compiler 
Acheive by using -- Method Overloading 

2.Run time polymorphism :
----------------------
dynamic polymorphism -- handle by JVM
Acheive by using -- Method Overriding 

==============
Method Overloading :

-- same class 
-- same method name 
-- diffrent arguments 
    type of arguments 
    sequence of arguments 
    no of argumnets 

Method Overriding 

 --- diffrent classes
 ---method name same
 ---arguments same 
    type of arguments
    sequence of arguments
    no of arguments
---- Is-A relationship (Inheritance)    


C -extends -C 
C -Implemnts -I









